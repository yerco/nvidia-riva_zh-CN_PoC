# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import riva_nlp_pb2 as riva_dot_proto_dot_riva__nlp__pb2


class RivaLanguageUnderstandingStub(object):
    """Riva Natural Language Services implement generic and task-specific APIs.
    The generic APIs allows users to design
    models for arbitrary use cases that conform simply with input and output
    types specified in the service.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClassifyText = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyText',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextClassRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextClassResponse.FromString,
                )
        self.ClassifyTokens = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyTokens',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.FromString,
                )
        self.TransformText = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/TransformText',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.FromString,
                )
        self.AnalyzeEntities = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeEntities',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeEntitiesRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.FromString,
                )
        self.AnalyzeIntent = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeIntent',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentResponse.FromString,
                )
        self.PunctuateText = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/PunctuateText',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.FromString,
                )
        self.NaturalQuery = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/NaturalQuery',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryResponse.FromString,
                )
        self.GetRivaNLPConfig = channel.unary_unary(
                '/nvidia.riva.nlp.RivaLanguageUnderstanding/GetRivaNLPConfig',
                request_serializer=riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigResponse.FromString,
                )


class RivaLanguageUnderstandingServicer(object):
    """Riva Natural Language Services implement generic and task-specific APIs.
    The generic APIs allows users to design
    models for arbitrary use cases that conform simply with input and output
    types specified in the service.

    """

    def ClassifyText(self, request, context):
        """ClassifyText takes as input an input/query string and parameters related
        to the requested model to use to evaluate the text. The service evaluates
        the text with the requested model, and returns one or more classifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClassifyTokens(self, request, context):
        """ClassifyTokens takes as input either a string or list of tokens and
        parameters related to which model to use. The service evaluates the text
        with the requested model, performing additional tokenization if necessary,
        and returns one or more class labels per token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransformText(self, request, context):
        """TransformText takes an input/query string and parameters related to the
        requested model and returns another string. The behavior of the function
        is defined entirely by the underlying model and may be used for
        tasks like translation, adding punctuation, augment the input directly,
        etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeEntities(self, request, context):
        """AnalyzeEntities accepts an input string and returns all named entities
        within the text, as well as a category and likelihood.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeIntent(self, request, context):
        """AnalyzeIntent accepts an input string and returns the most likely
        intent as well as slots relevant to that intent.

        The model requires that a valid "domain" be passed in, and optionally
        supports including a previous intent classification result to provide
        context for the model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PunctuateText(self, request, context):
        """PunctuateText takes text with no- or limited- punctuation and returns
        the same text with corrected punctuation and capitalization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NaturalQuery(self, request, context):
        """NaturalQuery is a search function that enables querying one or more
        documents or contexts with a query that is written in natural language.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRivaNLPConfig(self, request, context):
        """Enables clients to request the configuration of the current ASR service, or
        a specific model within the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RivaLanguageUnderstandingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClassifyText': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifyText,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextClassRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextClassResponse.SerializeToString,
            ),
            'ClassifyTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifyTokens,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.SerializeToString,
            ),
            'TransformText': grpc.unary_unary_rpc_method_handler(
                    servicer.TransformText,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.SerializeToString,
            ),
            'AnalyzeEntities': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeEntities,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeEntitiesRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.SerializeToString,
            ),
            'AnalyzeIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeIntent,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentResponse.SerializeToString,
            ),
            'PunctuateText': grpc.unary_unary_rpc_method_handler(
                    servicer.PunctuateText,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.SerializeToString,
            ),
            'NaturalQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.NaturalQuery,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryResponse.SerializeToString,
            ),
            'GetRivaNLPConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRivaNLPConfig,
                    request_deserializer=riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nvidia.riva.nlp.RivaLanguageUnderstanding', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RivaLanguageUnderstanding(object):
    """Riva Natural Language Services implement generic and task-specific APIs.
    The generic APIs allows users to design
    models for arbitrary use cases that conform simply with input and output
    types specified in the service.

    """

    @staticmethod
    def ClassifyText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyText',
            riva_dot_proto_dot_riva__nlp__pb2.TextClassRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.TextClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClassifyTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyTokens',
            riva_dot_proto_dot_riva__nlp__pb2.TokenClassRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransformText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/TransformText',
            riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeEntities',
            riva_dot_proto_dot_riva__nlp__pb2.AnalyzeEntitiesRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.TokenClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeIntent',
            riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.AnalyzeIntentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PunctuateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/PunctuateText',
            riva_dot_proto_dot_riva__nlp__pb2.TextTransformRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.TextTransformResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NaturalQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/NaturalQuery',
            riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.NaturalQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRivaNLPConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nvidia.riva.nlp.RivaLanguageUnderstanding/GetRivaNLPConfig',
            riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigRequest.SerializeToString,
            riva_dot_proto_dot_riva__nlp__pb2.RivaNLPConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
